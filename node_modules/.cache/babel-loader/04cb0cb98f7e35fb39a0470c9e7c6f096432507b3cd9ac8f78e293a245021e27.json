{"ast":null,"code":"// import React, { useState, useEffect } from \"react\";\n// import {\n//   Box,\n//   Typography,\n//   TextField,\n//   Button,\n//   MenuItem,\n//   Card,\n//   CardContent,\n//   Paper,\n//   FormControl,\n//   InputLabel,\n//   Select,\n//   Pagination,\n// } from \"@mui/material\";\n// import axios from \"axios\";\n\n// function HOME() {\n//   const [loanAmount, setLoanAmount] = useState(\"\");\n//   const [interestRate, setInterestRate] = useState(\"\");\n//   const [loanTenure, setLoanTenure] = useState(\"\");\n//   const [emi, setEmi] = useState(null);\n//   const [amortizationSchedule, setAmortizationSchedule] = useState([]);\n//   const [exchangeRates, setExchangeRates] = useState({});\n//   const [selectedCurrency, setSelectedCurrency] = useState(\"USD\");\n//   const [entriesPerPage, setEntriesPerPage] = useState(10);\n//   const [page, setPage] = useState(1);\n\n//   const totalPages = Math.ceil(amortizationSchedule.length / entriesPerPage);\n\n//   useEffect(() => {\n//     axios\n//       .get(\"https://v6.exchangerate-api.com/v6/77e571783ee71eebfe494ac5/latest/INR\")\n//       .then((res) => setExchangeRates(res.data.conversion_rates))\n//       .catch((err) => console.error(\"Error fetching exchange rates:\", err));\n//   }, []);\n\n//   const calculateEMI = () => {\n//     const principal = parseFloat(loanAmount);\n//     const rate = parseFloat(interestRate) / 12 / 100;\n//     const tenure = parseFloat(loanTenure) * 12;\n//     const emiAmount =\n//       (principal * rate * Math.pow(1 + rate, tenure)) /\n//       (Math.pow(1 + rate, tenure) - 1);\n\n//     setEmi(emiAmount.toFixed(2));\n\n//     let balance = principal;\n//     let schedule = [];\n//     for (let i = 1; i <= tenure; i++) {\n//       let interestPayment = balance * rate;\n//       let principalPayment = emiAmount - interestPayment;\n//       balance -= principalPayment;\n\n//       schedule.push({\n//         month: i,\n//         emi: emiAmount,\n//         principal: principalPayment,\n//         interest: interestPayment,\n//         balance: balance,\n//       });\n//     }\n//     setAmortizationSchedule(schedule);\n//     setPage(1);\n//   };\n\n//   const handleReset = () => {\n//     setLoanAmount(\"\");\n//     setInterestRate(\"\");\n//     setLoanTenure(\"\");\n//     setEmi(null);\n//     setAmortizationSchedule([]);\n//   };\n\n//   const handleCurrencyChange = (e) => {\n//     setSelectedCurrency(e.target.value);\n//   };\n\n//   const handleChangeEntries = (e) => {\n//     setEntriesPerPage(parseInt(e.target.value));\n//     setPage(1);\n//   };\n\n//   const handlePageChange = (_, value) => {\n//     setPage(value);\n//   };\n\n//   const conversionRate = exchangeRates[selectedCurrency] || 1;\n\n//   const paginatedEntries = amortizationSchedule.slice(\n//     (page - 1) * entriesPerPage,\n//     page * entriesPerPage\n//   );\n\n//   return (\n//     <Card sx={{ margin: \"40px auto\", padding: \"20px\" }}>\n//       <CardContent>\n//         <Typography variant=\"h4\" gutterBottom>\n//           Loan EMI Calculator\n//         </Typography>\n\n//         <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\", mb: 2 }}>\n//           <TextField\n//             label=\"Loan Amount\"\n//             variant=\"outlined\"\n//             value={loanAmount}\n//             onChange={(e) => setLoanAmount(e.target.value)}\n//           />\n//           <TextField\n//             label=\"Interest Rate (%)\"\n//             variant=\"outlined\"\n//             value={interestRate}\n//             onChange={(e) => setInterestRate(e.target.value)}\n//           />\n//           <TextField\n//             label=\"Loan Tenure (years)\"\n//             variant=\"outlined\"\n//             value={loanTenure}\n//             onChange={(e) => setLoanTenure(e.target.value)}\n//           />\n//           <TextField\n//             select\n//             label=\"Currency\"\n//             value={selectedCurrency}\n//             onChange={handleCurrencyChange}\n//           >\n//             {Object.keys(exchangeRates).map((currency) => (\n//               <MenuItem key={currency} value={currency}>\n//                 {currency}\n//               </MenuItem>\n//             ))}\n//           </TextField>\n//         </Box>\n\n//         <Button variant=\"contained\" onClick={calculateEMI}>\n//           Calculate EMI\n//         </Button>\n\n//         {emi && (\n//           <Box sx={{ mt: 3 }}>\n//             <Typography variant=\"h6\">\n//               Estimated EMI in INR: â‚¹{parseFloat(emi).toFixed(2)}\n//             </Typography>\n//             <Typography variant=\"h6\">\n//               Estimated EMI in {selectedCurrency}: {selectedCurrency}{\" \"}\n//               {(emi * conversionRate).toFixed(2)}\n//             </Typography>\n//           </Box>\n//         )}\n\n//         {amortizationSchedule.length > 0 && (\n//           <Box sx={{ mt: 5 }}>\n//             <Box\n//               sx={{\n//                 display: \"flex\",\n//                 justifyContent: \"space-between\",\n//                 alignItems: \"center\",\n//                 mb: 2,\n//                 flexWrap: \"wrap\",\n//               }}\n//             >\n//               <Typography variant=\"h5\">\n//                 Amortization Schedule ({selectedCurrency})\n//               </Typography>\n//               <Button variant=\"outlined\" color=\"error\" onClick={handleReset}>\n//                 Reset Table\n//               </Button>\n//             </Box>\n\n//             <Paper sx={{ overflowX: \"auto\" }}>\n//               <Box\n//                 sx={{\n//                   display: \"flex\",\n//                   minWidth: \"600px\",\n//                   fontWeight: \"bold\",\n//                   borderBottom: \"2px solid #000\",\n//                   paddingY: 1,\n//                   paddingX: 2,\n//                 }}\n//               >\n//                 <Box sx={{ width: \"20%\" }}>\n//                   <Typography>Month</Typography>\n//                 </Box>\n//                 <Box sx={{ width: \"20%\" }}>\n//                   <Typography>EMI ({selectedCurrency})</Typography>\n//                 </Box>\n//                 <Box sx={{ width: \"20%\" }}>\n//                   <Typography>Principal ({selectedCurrency})</Typography>\n//                 </Box>\n//                 <Box sx={{ width: \"20%\" }}>\n//                   <Typography>Interest ({selectedCurrency})</Typography>\n//                 </Box>\n//                 <Box sx={{ width: \"20%\" }}>\n//                   <Typography>Balance ({selectedCurrency})</Typography>\n//                 </Box>\n//               </Box>\n\n//               {/* Scrollable table body */}\n//               <Box\n//                 sx={{\n//                   maxHeight: 400,\n//                   overflowY: \"auto\",\n//                   paddingX: 2,\n//                 }}\n//               >\n//                 {paginatedEntries.map((row) => (\n//                   <Box\n//                     key={row.month}\n//                     sx={{\n//                       display: \"flex\",\n//                       justifyContent: \"space-between\",\n//                       paddingY: 1,\n//                       borderBottom: \"1px solid #ddd\",\n//                       minWidth: \"600px\",\n//                     }}\n//                   >\n//                     <Box sx={{ width: \"20%\" }}>\n//                       <Typography>{row.month}</Typography>\n//                     </Box>\n//                     <Box sx={{ width: \"20%\" }}>\n//                       <Typography>{(row.emi * conversionRate).toFixed(2)}</Typography>\n//                     </Box>\n//                     <Box sx={{ width: \"20%\" }}>\n//                       <Typography>{(row.principal * conversionRate).toFixed(2)}</Typography>\n//                     </Box>\n//                     <Box sx={{ width: \"20%\" }}>\n//                       <Typography>{(row.interest * conversionRate).toFixed(2)}</Typography>\n//                     </Box>\n//                     <Box sx={{ width: \"20%\" }}>\n//                       <Typography>{(row.balance * conversionRate).toFixed(2)}</Typography>\n//                     </Box>\n//                   </Box>\n//                 ))}\n//               </Box>\n//             </Paper>\n\n//             <Box\n//               sx={{\n//                 display: \"flex\",\n//                 justifyContent: \"space-between\",\n//                 mt: 3,\n//                 flexWrap: \"wrap\",\n//                 gap: 2,\n//               }}\n//             >\n//               <Typography variant=\"h6\">\n//                 Total Entries: {amortizationSchedule.length}\n//               </Typography>\n//               <Box sx={{ display: \"flex\", alignItems: \"center\", gap: 2 }}>\n//                 <FormControl size=\"small\">\n//                   <InputLabel>Entries</InputLabel>\n//                   <Select\n//                     value={entriesPerPage}\n//                     label=\"Entries\"\n//                     onChange={handleChangeEntries}\n//                   >\n//                     {[10, 25, 50, 100].map((num) => (\n//                       <MenuItem key={num} value={num}>\n//                         {num}\n//                       </MenuItem>\n//                     ))}\n//                   </Select>\n//                 </FormControl>\n//                 <Pagination\n//                   count={totalPages}\n//                   page={page}\n//                   onChange={handlePageChange}\n//                   sx={{ backgroundColor: \"#1E1E1E\", borderRadius: 1 }}\n//                 />\n//               </Box>\n//             </Box>\n//           </Box>\n//         )}\n//       </CardContent>\n//     </Card>\n//   );\n// }\n\n// export default HOME;\n\n// import React, { useState, useEffect } from \"react\";\n// import {\n//   Box,\n//   Typography,\n//   TextField,\n//   Button,\n//   MenuItem,\n//   Card,\n//   CardContent,\n//   Paper,\n//   FormControl,\n//   InputLabel,\n//   Select,\n//   Pagination,\n// } from \"@mui/material\";\n// import axios from \"axios\";\n// import { useTheme } from \"@mui/material/styles\"; // Import theme hook\n\n// function HOME() {\n//   const theme = useTheme(); // Use theme hook to get current theme\n\n//   const [loanAmount, setLoanAmount] = useState(\"\");\n//   const [interestRate, setInterestRate] = useState(\"\");\n//   const [loanTenure, setLoanTenure] = useState(\"\");\n//   const [emi, setEmi] = useState(null);\n//   const [amortizationSchedule, setAmortizationSchedule] = useState([]);\n//   const [exchangeRates, setExchangeRates] = useState({});\n//   const [selectedCurrency, setSelectedCurrency] = useState(\"USD\");\n//   const [entriesPerPage, setEntriesPerPage] = useState(10);\n//   const [page, setPage] = useState(1);\n\n//   const totalPages = Math.ceil(amortizationSchedule.length / entriesPerPage);\n\n//   useEffect(() => {\n//     axios\n//       .get(\n//         \"https://v6.exchangerate-api.com/v6/77e571783ee71eebfe494ac5/latest/INR\"\n//       )\n//       .then((res) => setExchangeRates(res.data.conversion_rates))\n//       .catch((err) => console.error(\"Error fetching exchange rates:\", err));\n//   }, []);\n\n//   const calculateEMI = () => {\n//     const principal = parseFloat(loanAmount);\n//     const rate = parseFloat(interestRate) / 12 / 100;\n//     const tenure = parseFloat(loanTenure) * 12;\n//     const emiAmount =\n//       (principal * rate * Math.pow(1 + rate, tenure)) /\n//       (Math.pow(1 + rate, tenure) - 1);\n\n//     setEmi(emiAmount.toFixed(2));\n\n//     let balance = principal;\n//     let schedule = [];\n//     for (let i = 1; i <= tenure; i++) {\n//       let interestPayment = balance * rate;\n//       let principalPayment = emiAmount - interestPayment;\n//       balance -= principalPayment;\n\n//       schedule.push({\n//         month: i,\n//         emi: emiAmount,\n//         principal: principalPayment,\n//         interest: interestPayment,\n//         balance: balance,\n//       });\n//     }\n//     setAmortizationSchedule(schedule);\n//     setPage(1);\n//   };\n\n//   const handleCurrencyChange = (e) => {\n//     setSelectedCurrency(e.target.value);\n//   };\n\n//   const handleChangeEntries = (e) => {\n//     setEntriesPerPage(parseInt(e.target.value));\n//     setPage(1);\n//   };\n\n//   const handlePageChange = (_, value) => {\n//     setPage(value);\n//   };\n\n//   const conversionRate = exchangeRates[selectedCurrency] || 1;\n\n//   const paginatedEntries = amortizationSchedule.slice(\n//     (page - 1) * entriesPerPage,\n//     page * entriesPerPage\n//   );\n\n//   return (\n//     <Card sx={{ margin: \"40px auto\", padding: \"20px\" }}>\n//       <CardContent>\n//         <Typography variant=\"h4\" gutterBottom>\n//           Loan EMI Calculator\n//         </Typography>\n\n//         <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\", mb: 2 }}>\n//           <TextField\n//             label=\"Loan Amount\"\n//             variant=\"outlined\"\n//             value={loanAmount}\n//             onChange={(e) => setLoanAmount(e.target.value)}\n//           />\n//           <TextField\n//             label=\"Interest Rate (%)\"\n//             variant=\"outlined\"\n//             value={interestRate}\n//             onChange={(e) => setInterestRate(e.target.value)}\n//           />\n//           <TextField\n//             label=\"Loan Tenure (years)\"\n//             variant=\"outlined\"\n//             value={loanTenure}\n//             onChange={(e) => setLoanTenure(e.target.value)}\n//           />\n//           <TextField\n//             select\n//             label=\"Currency\"\n//             value={selectedCurrency}\n//             onChange={handleCurrencyChange}\n//           >\n//             {Object.keys(exchangeRates).map((currency) => (\n//               <MenuItem key={currency} value={currency}>\n//                 {currency}\n//               </MenuItem>\n//             ))}\n//           </TextField>\n//         </Box>\n\n//         <Button variant=\"contained\" onClick={calculateEMI}>\n//           Calculate EMI\n//         </Button>\n\n//         {emi && (\n//           <Box sx={{ mt: 3 }}>\n//             <Typography variant=\"h6\">\n//               Estimated EMI in INR: â‚¹{parseFloat(emi).toFixed(2)}\n//             </Typography>\n//             <Typography variant=\"h6\">\n//               Estimated EMI in {selectedCurrency}: {selectedCurrency}{\" \"}\n//               {(emi * conversionRate).toFixed(2)}\n//             </Typography>\n//           </Box>\n//         )}\n\n//         {amortizationSchedule.length > 0 && (\n//           <Box sx={{ mt: 5 }}>\n//             <Typography variant=\"h5\" gutterBottom>\n//               Amortization Schedule ({selectedCurrency})\n//             </Typography>\n\n//             <Paper sx={{ padding: 2, overflowX: \"auto\" }}>\n//               <Box\n//                 sx={{\n//                   display: \"flex\",\n//                   minWidth: \"600px\", // ensures horizontal scroll\n//                   fontWeight: \"bold\",\n//                   borderBottom: \"2px solid #000\",\n//                   paddingY: 1,\n//                 }}\n//               >\n//                 <Box sx={{ width: \"20%\" }}>\n//                   <Typography>Month</Typography>\n//                 </Box>\n//                 <Box sx={{ width: \"20%\" }}>\n//                   <Typography>EMI</Typography>\n//                 </Box>\n//                 <Box sx={{ width: \"20%\" }}>\n//                   <Typography>Principal</Typography>\n//                 </Box>\n//                 <Box sx={{ width: \"20%\" }}>\n//                   <Typography>Interest</Typography>\n//                 </Box>\n//                 <Box sx={{ width: \"20%\" }}>\n//                   <Typography>Balance</Typography>\n//                 </Box>\n//               </Box>\n\n//               {/* Scrollable data rows */}\n//               <Box sx={{ overflowX: \"auto\", maxHeight: 400 }}>\n//                 {paginatedEntries.map((row) => (\n//                   <Box\n//                     key={row.month}\n//                     sx={{\n//                       display: \"flex\",\n//                       justifyContent: \"space-between\",\n//                       paddingY: 1,\n//                       borderBottom: \"1px solid #ddd\",\n//                     }}\n//                   >\n//                     <Box sx={{ width: \"20%\" }}>\n//                       <Typography>{row.month}</Typography>\n//                     </Box>\n//                     <Box sx={{ width: \"20%\" }}>\n//                       <Typography>\n//                         {selectedCurrency}{\" \"}\n//                         {(row.emi * conversionRate).toFixed(2)}\n//                       </Typography>\n//                     </Box>\n//                     <Box sx={{ width: \"20%\" }}>\n//                       <Typography>\n//                         {selectedCurrency}{\" \"}\n//                         {(row.principal * conversionRate).toFixed(2)}\n//                       </Typography>\n//                     </Box>\n//                     <Box sx={{ width: \"20%\" }}>\n//                       <Typography>\n//                         {selectedCurrency}{\" \"}\n//                         {(row.interest * conversionRate).toFixed(2)}\n//                       </Typography>\n//                     </Box>\n//                     <Box sx={{ width: \"20%\" }}>\n//                       <Typography>\n//                         {selectedCurrency}{\" \"}\n//                         {(row.balance * conversionRate).toFixed(2)}\n//                       </Typography>\n//                     </Box>\n//                   </Box>\n//                 ))}\n//               </Box>\n//             </Paper>\n\n//             <Box\n//               sx={{\n//                 display: \"flex\",\n//                 justifyContent: \"space-between\",\n//                 mt: 3,\n//                 flexWrap: \"wrap\",\n//                 gap: 2,\n//               }}\n//             >\n//               <Typography variant=\"h6\">\n//                 Total Entries: {amortizationSchedule.length}\n//               </Typography>\n//               <Box sx={{ display: \"flex\", alignItems: \"center\", gap: 2 }}>\n//                 <FormControl size=\"small\">\n//                   <InputLabel>Entries</InputLabel>\n//                   <Select\n//                     value={entriesPerPage}\n//                     label=\"Entries\"\n//                     onChange={handleChangeEntries}\n//                   >\n//                     {[10, 25, 50, 100].map((num) => (\n//                       <MenuItem key={num} value={num}>\n//                         {num}\n//                       </MenuItem>\n//                     ))}\n//                   </Select>\n//                 </FormControl>\n//                 <Pagination\n//                   count={totalPages}\n//                   page={page}\n//                   onChange={handlePageChange}\n//                   sx={{\n//                     backgroundColor:\n//                       theme.palette.mode === \"dark\" ? \"#1E1E1E\" : \"#ffffff\", \n//                     borderRadius: 1,\n//                   }}\n//                 />\n//               </Box>\n//             </Box>\n//           </Box>\n//         )}\n//       </CardContent>\n//     </Card>\n//   );\n// }\n\n// export default HOME;","map":{"version":3,"names":[],"sources":["P:/New folder/model/src/COMPONENTS/HOME.js"],"sourcesContent":["// import React, { useState, useEffect } from \"react\";\r\n// import {\r\n//   Box,\r\n//   Typography,\r\n//   TextField,\r\n//   Button,\r\n//   MenuItem,\r\n//   Card,\r\n//   CardContent,\r\n//   Paper,\r\n//   FormControl,\r\n//   InputLabel,\r\n//   Select,\r\n//   Pagination,\r\n// } from \"@mui/material\";\r\n// import axios from \"axios\";\r\n\r\n// function HOME() {\r\n//   const [loanAmount, setLoanAmount] = useState(\"\");\r\n//   const [interestRate, setInterestRate] = useState(\"\");\r\n//   const [loanTenure, setLoanTenure] = useState(\"\");\r\n//   const [emi, setEmi] = useState(null);\r\n//   const [amortizationSchedule, setAmortizationSchedule] = useState([]);\r\n//   const [exchangeRates, setExchangeRates] = useState({});\r\n//   const [selectedCurrency, setSelectedCurrency] = useState(\"USD\");\r\n//   const [entriesPerPage, setEntriesPerPage] = useState(10);\r\n//   const [page, setPage] = useState(1);\r\n\r\n//   const totalPages = Math.ceil(amortizationSchedule.length / entriesPerPage);\r\n\r\n//   useEffect(() => {\r\n//     axios\r\n//       .get(\"https://v6.exchangerate-api.com/v6/77e571783ee71eebfe494ac5/latest/INR\")\r\n//       .then((res) => setExchangeRates(res.data.conversion_rates))\r\n//       .catch((err) => console.error(\"Error fetching exchange rates:\", err));\r\n//   }, []);\r\n\r\n//   const calculateEMI = () => {\r\n//     const principal = parseFloat(loanAmount);\r\n//     const rate = parseFloat(interestRate) / 12 / 100;\r\n//     const tenure = parseFloat(loanTenure) * 12;\r\n//     const emiAmount =\r\n//       (principal * rate * Math.pow(1 + rate, tenure)) /\r\n//       (Math.pow(1 + rate, tenure) - 1);\r\n\r\n//     setEmi(emiAmount.toFixed(2));\r\n\r\n//     let balance = principal;\r\n//     let schedule = [];\r\n//     for (let i = 1; i <= tenure; i++) {\r\n//       let interestPayment = balance * rate;\r\n//       let principalPayment = emiAmount - interestPayment;\r\n//       balance -= principalPayment;\r\n\r\n//       schedule.push({\r\n//         month: i,\r\n//         emi: emiAmount,\r\n//         principal: principalPayment,\r\n//         interest: interestPayment,\r\n//         balance: balance,\r\n//       });\r\n//     }\r\n//     setAmortizationSchedule(schedule);\r\n//     setPage(1);\r\n//   };\r\n\r\n//   const handleReset = () => {\r\n//     setLoanAmount(\"\");\r\n//     setInterestRate(\"\");\r\n//     setLoanTenure(\"\");\r\n//     setEmi(null);\r\n//     setAmortizationSchedule([]);\r\n//   };\r\n\r\n//   const handleCurrencyChange = (e) => {\r\n//     setSelectedCurrency(e.target.value);\r\n//   };\r\n\r\n//   const handleChangeEntries = (e) => {\r\n//     setEntriesPerPage(parseInt(e.target.value));\r\n//     setPage(1);\r\n//   };\r\n\r\n//   const handlePageChange = (_, value) => {\r\n//     setPage(value);\r\n//   };\r\n\r\n//   const conversionRate = exchangeRates[selectedCurrency] || 1;\r\n\r\n//   const paginatedEntries = amortizationSchedule.slice(\r\n//     (page - 1) * entriesPerPage,\r\n//     page * entriesPerPage\r\n//   );\r\n\r\n//   return (\r\n//     <Card sx={{ margin: \"40px auto\", padding: \"20px\" }}>\r\n//       <CardContent>\r\n//         <Typography variant=\"h4\" gutterBottom>\r\n//           Loan EMI Calculator\r\n//         </Typography>\r\n\r\n//         <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\", mb: 2 }}>\r\n//           <TextField\r\n//             label=\"Loan Amount\"\r\n//             variant=\"outlined\"\r\n//             value={loanAmount}\r\n//             onChange={(e) => setLoanAmount(e.target.value)}\r\n//           />\r\n//           <TextField\r\n//             label=\"Interest Rate (%)\"\r\n//             variant=\"outlined\"\r\n//             value={interestRate}\r\n//             onChange={(e) => setInterestRate(e.target.value)}\r\n//           />\r\n//           <TextField\r\n//             label=\"Loan Tenure (years)\"\r\n//             variant=\"outlined\"\r\n//             value={loanTenure}\r\n//             onChange={(e) => setLoanTenure(e.target.value)}\r\n//           />\r\n//           <TextField\r\n//             select\r\n//             label=\"Currency\"\r\n//             value={selectedCurrency}\r\n//             onChange={handleCurrencyChange}\r\n//           >\r\n//             {Object.keys(exchangeRates).map((currency) => (\r\n//               <MenuItem key={currency} value={currency}>\r\n//                 {currency}\r\n//               </MenuItem>\r\n//             ))}\r\n//           </TextField>\r\n//         </Box>\r\n\r\n//         <Button variant=\"contained\" onClick={calculateEMI}>\r\n//           Calculate EMI\r\n//         </Button>\r\n\r\n//         {emi && (\r\n//           <Box sx={{ mt: 3 }}>\r\n//             <Typography variant=\"h6\">\r\n//               Estimated EMI in INR: â‚¹{parseFloat(emi).toFixed(2)}\r\n//             </Typography>\r\n//             <Typography variant=\"h6\">\r\n//               Estimated EMI in {selectedCurrency}: {selectedCurrency}{\" \"}\r\n//               {(emi * conversionRate).toFixed(2)}\r\n//             </Typography>\r\n//           </Box>\r\n//         )}\r\n\r\n//         {amortizationSchedule.length > 0 && (\r\n//           <Box sx={{ mt: 5 }}>\r\n//             <Box\r\n//               sx={{\r\n//                 display: \"flex\",\r\n//                 justifyContent: \"space-between\",\r\n//                 alignItems: \"center\",\r\n//                 mb: 2,\r\n//                 flexWrap: \"wrap\",\r\n//               }}\r\n//             >\r\n//               <Typography variant=\"h5\">\r\n//                 Amortization Schedule ({selectedCurrency})\r\n//               </Typography>\r\n//               <Button variant=\"outlined\" color=\"error\" onClick={handleReset}>\r\n//                 Reset Table\r\n//               </Button>\r\n//             </Box>\r\n\r\n//             <Paper sx={{ overflowX: \"auto\" }}>\r\n//               <Box\r\n//                 sx={{\r\n//                   display: \"flex\",\r\n//                   minWidth: \"600px\",\r\n//                   fontWeight: \"bold\",\r\n//                   borderBottom: \"2px solid #000\",\r\n//                   paddingY: 1,\r\n//                   paddingX: 2,\r\n//                 }}\r\n//               >\r\n//                 <Box sx={{ width: \"20%\" }}>\r\n//                   <Typography>Month</Typography>\r\n//                 </Box>\r\n//                 <Box sx={{ width: \"20%\" }}>\r\n//                   <Typography>EMI ({selectedCurrency})</Typography>\r\n//                 </Box>\r\n//                 <Box sx={{ width: \"20%\" }}>\r\n//                   <Typography>Principal ({selectedCurrency})</Typography>\r\n//                 </Box>\r\n//                 <Box sx={{ width: \"20%\" }}>\r\n//                   <Typography>Interest ({selectedCurrency})</Typography>\r\n//                 </Box>\r\n//                 <Box sx={{ width: \"20%\" }}>\r\n//                   <Typography>Balance ({selectedCurrency})</Typography>\r\n//                 </Box>\r\n//               </Box>\r\n\r\n//               {/* Scrollable table body */}\r\n//               <Box\r\n//                 sx={{\r\n//                   maxHeight: 400,\r\n//                   overflowY: \"auto\",\r\n//                   paddingX: 2,\r\n//                 }}\r\n//               >\r\n//                 {paginatedEntries.map((row) => (\r\n//                   <Box\r\n//                     key={row.month}\r\n//                     sx={{\r\n//                       display: \"flex\",\r\n//                       justifyContent: \"space-between\",\r\n//                       paddingY: 1,\r\n//                       borderBottom: \"1px solid #ddd\",\r\n//                       minWidth: \"600px\",\r\n//                     }}\r\n//                   >\r\n//                     <Box sx={{ width: \"20%\" }}>\r\n//                       <Typography>{row.month}</Typography>\r\n//                     </Box>\r\n//                     <Box sx={{ width: \"20%\" }}>\r\n//                       <Typography>{(row.emi * conversionRate).toFixed(2)}</Typography>\r\n//                     </Box>\r\n//                     <Box sx={{ width: \"20%\" }}>\r\n//                       <Typography>{(row.principal * conversionRate).toFixed(2)}</Typography>\r\n//                     </Box>\r\n//                     <Box sx={{ width: \"20%\" }}>\r\n//                       <Typography>{(row.interest * conversionRate).toFixed(2)}</Typography>\r\n//                     </Box>\r\n//                     <Box sx={{ width: \"20%\" }}>\r\n//                       <Typography>{(row.balance * conversionRate).toFixed(2)}</Typography>\r\n//                     </Box>\r\n//                   </Box>\r\n//                 ))}\r\n//               </Box>\r\n//             </Paper>\r\n\r\n//             <Box\r\n//               sx={{\r\n//                 display: \"flex\",\r\n//                 justifyContent: \"space-between\",\r\n//                 mt: 3,\r\n//                 flexWrap: \"wrap\",\r\n//                 gap: 2,\r\n//               }}\r\n//             >\r\n//               <Typography variant=\"h6\">\r\n//                 Total Entries: {amortizationSchedule.length}\r\n//               </Typography>\r\n//               <Box sx={{ display: \"flex\", alignItems: \"center\", gap: 2 }}>\r\n//                 <FormControl size=\"small\">\r\n//                   <InputLabel>Entries</InputLabel>\r\n//                   <Select\r\n//                     value={entriesPerPage}\r\n//                     label=\"Entries\"\r\n//                     onChange={handleChangeEntries}\r\n//                   >\r\n//                     {[10, 25, 50, 100].map((num) => (\r\n//                       <MenuItem key={num} value={num}>\r\n//                         {num}\r\n//                       </MenuItem>\r\n//                     ))}\r\n//                   </Select>\r\n//                 </FormControl>\r\n//                 <Pagination\r\n//                   count={totalPages}\r\n//                   page={page}\r\n//                   onChange={handlePageChange}\r\n//                   sx={{ backgroundColor: \"#1E1E1E\", borderRadius: 1 }}\r\n//                 />\r\n//               </Box>\r\n//             </Box>\r\n//           </Box>\r\n//         )}\r\n//       </CardContent>\r\n//     </Card>\r\n//   );\r\n// }\r\n\r\n// export default HOME;\r\n\r\n// import React, { useState, useEffect } from \"react\";\r\n// import {\r\n//   Box,\r\n//   Typography,\r\n//   TextField,\r\n//   Button,\r\n//   MenuItem,\r\n//   Card,\r\n//   CardContent,\r\n//   Paper,\r\n//   FormControl,\r\n//   InputLabel,\r\n//   Select,\r\n//   Pagination,\r\n// } from \"@mui/material\";\r\n// import axios from \"axios\";\r\n// import { useTheme } from \"@mui/material/styles\"; // Import theme hook\r\n\r\n// function HOME() {\r\n//   const theme = useTheme(); // Use theme hook to get current theme\r\n\r\n//   const [loanAmount, setLoanAmount] = useState(\"\");\r\n//   const [interestRate, setInterestRate] = useState(\"\");\r\n//   const [loanTenure, setLoanTenure] = useState(\"\");\r\n//   const [emi, setEmi] = useState(null);\r\n//   const [amortizationSchedule, setAmortizationSchedule] = useState([]);\r\n//   const [exchangeRates, setExchangeRates] = useState({});\r\n//   const [selectedCurrency, setSelectedCurrency] = useState(\"USD\");\r\n//   const [entriesPerPage, setEntriesPerPage] = useState(10);\r\n//   const [page, setPage] = useState(1);\r\n\r\n//   const totalPages = Math.ceil(amortizationSchedule.length / entriesPerPage);\r\n\r\n//   useEffect(() => {\r\n//     axios\r\n//       .get(\r\n//         \"https://v6.exchangerate-api.com/v6/77e571783ee71eebfe494ac5/latest/INR\"\r\n//       )\r\n//       .then((res) => setExchangeRates(res.data.conversion_rates))\r\n//       .catch((err) => console.error(\"Error fetching exchange rates:\", err));\r\n//   }, []);\r\n\r\n//   const calculateEMI = () => {\r\n//     const principal = parseFloat(loanAmount);\r\n//     const rate = parseFloat(interestRate) / 12 / 100;\r\n//     const tenure = parseFloat(loanTenure) * 12;\r\n//     const emiAmount =\r\n//       (principal * rate * Math.pow(1 + rate, tenure)) /\r\n//       (Math.pow(1 + rate, tenure) - 1);\r\n\r\n//     setEmi(emiAmount.toFixed(2));\r\n\r\n//     let balance = principal;\r\n//     let schedule = [];\r\n//     for (let i = 1; i <= tenure; i++) {\r\n//       let interestPayment = balance * rate;\r\n//       let principalPayment = emiAmount - interestPayment;\r\n//       balance -= principalPayment;\r\n\r\n//       schedule.push({\r\n//         month: i,\r\n//         emi: emiAmount,\r\n//         principal: principalPayment,\r\n//         interest: interestPayment,\r\n//         balance: balance,\r\n//       });\r\n//     }\r\n//     setAmortizationSchedule(schedule);\r\n//     setPage(1);\r\n//   };\r\n\r\n//   const handleCurrencyChange = (e) => {\r\n//     setSelectedCurrency(e.target.value);\r\n//   };\r\n\r\n//   const handleChangeEntries = (e) => {\r\n//     setEntriesPerPage(parseInt(e.target.value));\r\n//     setPage(1);\r\n//   };\r\n\r\n//   const handlePageChange = (_, value) => {\r\n//     setPage(value);\r\n//   };\r\n\r\n//   const conversionRate = exchangeRates[selectedCurrency] || 1;\r\n\r\n//   const paginatedEntries = amortizationSchedule.slice(\r\n//     (page - 1) * entriesPerPage,\r\n//     page * entriesPerPage\r\n//   );\r\n\r\n//   return (\r\n//     <Card sx={{ margin: \"40px auto\", padding: \"20px\" }}>\r\n//       <CardContent>\r\n//         <Typography variant=\"h4\" gutterBottom>\r\n//           Loan EMI Calculator\r\n//         </Typography>\r\n\r\n//         <Box sx={{ display: \"flex\", gap: 2, flexWrap: \"wrap\", mb: 2 }}>\r\n//           <TextField\r\n//             label=\"Loan Amount\"\r\n//             variant=\"outlined\"\r\n//             value={loanAmount}\r\n//             onChange={(e) => setLoanAmount(e.target.value)}\r\n//           />\r\n//           <TextField\r\n//             label=\"Interest Rate (%)\"\r\n//             variant=\"outlined\"\r\n//             value={interestRate}\r\n//             onChange={(e) => setInterestRate(e.target.value)}\r\n//           />\r\n//           <TextField\r\n//             label=\"Loan Tenure (years)\"\r\n//             variant=\"outlined\"\r\n//             value={loanTenure}\r\n//             onChange={(e) => setLoanTenure(e.target.value)}\r\n//           />\r\n//           <TextField\r\n//             select\r\n//             label=\"Currency\"\r\n//             value={selectedCurrency}\r\n//             onChange={handleCurrencyChange}\r\n//           >\r\n//             {Object.keys(exchangeRates).map((currency) => (\r\n//               <MenuItem key={currency} value={currency}>\r\n//                 {currency}\r\n//               </MenuItem>\r\n//             ))}\r\n//           </TextField>\r\n//         </Box>\r\n\r\n//         <Button variant=\"contained\" onClick={calculateEMI}>\r\n//           Calculate EMI\r\n//         </Button>\r\n\r\n//         {emi && (\r\n//           <Box sx={{ mt: 3 }}>\r\n//             <Typography variant=\"h6\">\r\n//               Estimated EMI in INR: â‚¹{parseFloat(emi).toFixed(2)}\r\n//             </Typography>\r\n//             <Typography variant=\"h6\">\r\n//               Estimated EMI in {selectedCurrency}: {selectedCurrency}{\" \"}\r\n//               {(emi * conversionRate).toFixed(2)}\r\n//             </Typography>\r\n//           </Box>\r\n//         )}\r\n\r\n//         {amortizationSchedule.length > 0 && (\r\n//           <Box sx={{ mt: 5 }}>\r\n//             <Typography variant=\"h5\" gutterBottom>\r\n//               Amortization Schedule ({selectedCurrency})\r\n//             </Typography>\r\n\r\n//             <Paper sx={{ padding: 2, overflowX: \"auto\" }}>\r\n//               <Box\r\n//                 sx={{\r\n//                   display: \"flex\",\r\n//                   minWidth: \"600px\", // ensures horizontal scroll\r\n//                   fontWeight: \"bold\",\r\n//                   borderBottom: \"2px solid #000\",\r\n//                   paddingY: 1,\r\n//                 }}\r\n//               >\r\n//                 <Box sx={{ width: \"20%\" }}>\r\n//                   <Typography>Month</Typography>\r\n//                 </Box>\r\n//                 <Box sx={{ width: \"20%\" }}>\r\n//                   <Typography>EMI</Typography>\r\n//                 </Box>\r\n//                 <Box sx={{ width: \"20%\" }}>\r\n//                   <Typography>Principal</Typography>\r\n//                 </Box>\r\n//                 <Box sx={{ width: \"20%\" }}>\r\n//                   <Typography>Interest</Typography>\r\n//                 </Box>\r\n//                 <Box sx={{ width: \"20%\" }}>\r\n//                   <Typography>Balance</Typography>\r\n//                 </Box>\r\n//               </Box>\r\n\r\n//               {/* Scrollable data rows */}\r\n//               <Box sx={{ overflowX: \"auto\", maxHeight: 400 }}>\r\n//                 {paginatedEntries.map((row) => (\r\n//                   <Box\r\n//                     key={row.month}\r\n//                     sx={{\r\n//                       display: \"flex\",\r\n//                       justifyContent: \"space-between\",\r\n//                       paddingY: 1,\r\n//                       borderBottom: \"1px solid #ddd\",\r\n//                     }}\r\n//                   >\r\n//                     <Box sx={{ width: \"20%\" }}>\r\n//                       <Typography>{row.month}</Typography>\r\n//                     </Box>\r\n//                     <Box sx={{ width: \"20%\" }}>\r\n//                       <Typography>\r\n//                         {selectedCurrency}{\" \"}\r\n//                         {(row.emi * conversionRate).toFixed(2)}\r\n//                       </Typography>\r\n//                     </Box>\r\n//                     <Box sx={{ width: \"20%\" }}>\r\n//                       <Typography>\r\n//                         {selectedCurrency}{\" \"}\r\n//                         {(row.principal * conversionRate).toFixed(2)}\r\n//                       </Typography>\r\n//                     </Box>\r\n//                     <Box sx={{ width: \"20%\" }}>\r\n//                       <Typography>\r\n//                         {selectedCurrency}{\" \"}\r\n//                         {(row.interest * conversionRate).toFixed(2)}\r\n//                       </Typography>\r\n//                     </Box>\r\n//                     <Box sx={{ width: \"20%\" }}>\r\n//                       <Typography>\r\n//                         {selectedCurrency}{\" \"}\r\n//                         {(row.balance * conversionRate).toFixed(2)}\r\n//                       </Typography>\r\n//                     </Box>\r\n//                   </Box>\r\n//                 ))}\r\n//               </Box>\r\n//             </Paper>\r\n\r\n//             <Box\r\n//               sx={{\r\n//                 display: \"flex\",\r\n//                 justifyContent: \"space-between\",\r\n//                 mt: 3,\r\n//                 flexWrap: \"wrap\",\r\n//                 gap: 2,\r\n//               }}\r\n//             >\r\n//               <Typography variant=\"h6\">\r\n//                 Total Entries: {amortizationSchedule.length}\r\n//               </Typography>\r\n//               <Box sx={{ display: \"flex\", alignItems: \"center\", gap: 2 }}>\r\n//                 <FormControl size=\"small\">\r\n//                   <InputLabel>Entries</InputLabel>\r\n//                   <Select\r\n//                     value={entriesPerPage}\r\n//                     label=\"Entries\"\r\n//                     onChange={handleChangeEntries}\r\n//                   >\r\n//                     {[10, 25, 50, 100].map((num) => (\r\n//                       <MenuItem key={num} value={num}>\r\n//                         {num}\r\n//                       </MenuItem>\r\n//                     ))}\r\n//                   </Select>\r\n//                 </FormControl>\r\n//                 <Pagination\r\n//                   count={totalPages}\r\n//                   page={page}\r\n//                   onChange={handlePageChange}\r\n//                   sx={{\r\n//                     backgroundColor:\r\n//                       theme.palette.mode === \"dark\" ? \"#1E1E1E\" : \"#ffffff\", \r\n//                     borderRadius: 1,\r\n//                   }}\r\n//                 />\r\n//               </Box>\r\n//             </Box>\r\n//           </Box>\r\n//         )}\r\n//       </CardContent>\r\n//     </Card>\r\n//   );\r\n// }\r\n\r\n// export default HOME;\r\n"],"mappingsignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}